import cv2
import numpy as np
import keyboard as kb
import pyautogui
import interception
import time

interception.auto_capture_devices(keyboard=True, mouse=True)

low_green = np.array([43, 159, 170])
high_green = np.array([63, 179, 250])

low_orange = np.array([9, 178, 181])
high_orange = np.array([29, 198, 261])
#[  9 178 181] [ 29 198 261]
while True:
    if kb.is_pressed("F2"):
        screenshot = pyautogui.screenshot()  # Captura apenas uma região específica
        img = cv2.cvtColor(np.array(screenshot), cv2.COLOR_RGB2BGR)
        hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)

        green_mask = cv2.inRange(hsv, low_green, high_green)
        orange_mask = cv2.inRange(hsv, low_orange, high_orange)

        orange_pixels = cv2.countNonZero(orange_mask)
        green_pixels = cv2.countNonZero(green_mask)
        #cv2.imshow("Image", orange_mask)
        #cv2.waitKey(0)
        
        if green_pixels > 100:
            print("Yes")
            time.sleep(0.1)  # Aumente o tempo de espera para reduzir a carga da CPU
        elif orange_pixels > 100:
            print("Yes, orange")
            time.sleep(0.1)
        else:
            print("No")
            interception.click()
            time.sleep(0.1)  # Aumente o tempo de espera para reduzir a carga da CPU
            interception.press("q")
            interception.click()
    elif kb.is_pressed("F3"):  # Pressionar F3 para sair do loop
        break
    else:
        time.sleep(0.1)  # Aumente o tempo de espera para reduzir a carga da CPU