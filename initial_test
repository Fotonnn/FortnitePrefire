import cv2
import numpy as np
import keyboard as kb
import interception
import time
import dxcam

interception.auto_capture_devices(keyboard=True, mouse=True)

low_green = np.array([43, 159, 170])
high_green = np.array([63, 179, 250])

low_orange = np.array([9, 178, 181])
high_orange = np.array([29, 198, 261])

# Tamanho da tela
largura_da_tela = 1920  # Substitua pelo valor correto da largura da sua tela
altura_da_tela = 1080  # Substitua pelo valor correto da altura da sua tela

# Calculando as coordenadas do quadrado no centro da tela
largura_quadrado = 1200
altura_quadrado = 600

# Calculando as coordenadas do quadrado no centro da tela
left = (largura_da_tela - largura_quadrado) // 2
top = (altura_da_tela - altura_quadrado) // 2
right = left + largura_quadrado
bottom = top + altura_quadrado


camera = dxcam.create()
is_cam_on = False

img = None  # Inicializa a variável img fora do loop para reutilização

while True:
    if kb.is_pressed("F5") and not is_cam_on:
        camera.start(region=(left, top, right, bottom), target_fps=120)
        is_cam_on = True
        print("Camera initialized! Press F6 to turn off!")
    elif kb.is_pressed("F6") and is_cam_on:
        camera.stop()
        is_cam_on = False
        print("Camera stopped! Press F5 to turn on again.")
    elif is_cam_on:
        if kb.is_pressed("F2"):  # threaded
            image = camera.get_latest_frame()  # Will block until new frame available
            img = cv2.cvtColor(np.array(image), cv2.COLOR_RGB2BGR)
            hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)

            orange_mask = cv2.inRange(hsv, low_orange, high_orange)

            orange_pixels = cv2.countNonZero(orange_mask)

            if orange_pixels < 100:
                interception.click()
                interception.press("q")
                interception.click()
        time.sleep(0.05)  # Reduzido o tempo de espera para 0.05 segundos
    else:
        print("Press F5 to turn on the camera!")
        time.sleep(1)
